{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Matan\\\\memerator\\\\src\\\\components\\\\HistoryMemes.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { Meme } from \"./components/Meme\";\nimport { GeneratedMeme } from \"./components/GeneratedMeme\";\nimport { FacebookShareButton, FacebookIcon, TwitterShareButton, TwitterIcon, TumblrShareButton, TumblrIcon, TelegramShareButton, TelegramIcon, WhatsappShareButton, WhatsappIcon, RedditShareButton, RedditIcon } from \"react-share\";\n\nconst objectToQueryParam = obj => {\n  const params = Object.entries(obj).map(([key, value]) => `${key}=${value}`);\n  return \"?\" + params.join(\"&\");\n};\n\nfunction HistoryMemes() {\n  _s();\n\n  const [templates, setTemplates] = useState([]);\n  const [template, setTemplate] = useState(null);\n  const [topText, setTopText] = useState(\"\");\n  const [bottomText, setBottomText] = useState(\"\");\n  const [meme, setMeme] = useState(null);\n  const [memes, setMemes] = useState([]);\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\").then(x => x.json().then(response => setTemplates(response.data.memes)));\n  }, []);\n\n  if (meme) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \" Meme Generator \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        style: {\n          width: 200\n        },\n        src: meme,\n        alt: \"custom meme\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onClick: async e => {\n          e.preventDefault();\n          console.log(\"refresh\");\n          window.location.reload();\n        },\n        children: [/*#__PURE__*/_jsxDEV(FacebookShareButton, {\n          url: meme,\n          children: /*#__PURE__*/_jsxDEV(FacebookIcon, {\n            size: 36\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TwitterShareButton, {\n          url: meme,\n          children: /*#__PURE__*/_jsxDEV(TwitterIcon, {\n            size: 36\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TumblrShareButton, {\n          url: meme,\n          children: /*#__PURE__*/_jsxDEV(TumblrIcon, {\n            size: 36\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(WhatsappShareButton, {\n          url: meme,\n          children: /*#__PURE__*/_jsxDEV(WhatsappIcon, {\n            size: 36\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TelegramShareButton, {\n          url: meme,\n          children: /*#__PURE__*/_jsxDEV(TelegramIcon, {\n            size: 36\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(RedditShareButton, {\n          url: meme,\n          children: /*#__PURE__*/_jsxDEV(RedditIcon, {\n            size: 36\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\"\n    },\n    children: [template && /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: async e => {\n        e.preventDefault(); // add logic to create meme from api\n\n        const params = {\n          template_id: template.id,\n          text0: topText,\n          text1: bottomText,\n          username: \"matan.atti\",\n          password: \"m12345678\"\n        };\n        const response = await fetch(`https://api.imgflip.com/caption_image${objectToQueryParam(params)}`);\n        const result = await response.json();\n        console.log(\"result: \", result);\n\n        if (!result.success) {\n          setMeme(null);\n        }\n\n        if (result.success) {\n          setMeme(result.data.url); // memes.push(result.data.url);\n\n          localStorage.setItem(Date.now(), result.data.url);\n\n          for (let i = 0; i < localStorage.length; i++) {\n            let key = localStorage.key(i);\n            console.log(\"local storage: \", localStorage.getItem(key));\n            memes.push(localStorage.getItem(key));\n            setMemes(memes);\n            console.log(\"my memes: \", memes);\n          }\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(Meme, {\n        template: template\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"top text\",\n        value: topText,\n        onChange: e => setTopText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"bottom text\",\n        value: bottomText,\n        onChange: e => setBottomText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"create \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this), !template && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: templates.map(template => {\n        return /*#__PURE__*/_jsxDEV(Meme, {\n          template: template,\n          onClick: () => {\n            setTemplate(template);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n\n_s(HistoryMemes, \"oKm21wOc5J4rOIiPYsd32Uq8tCc=\");\n\n_c = HistoryMemes;\nexport default HistoryMemes;\n\nvar _c;\n\n$RefreshReg$(_c, \"HistoryMemes\");","map":{"version":3,"sources":["C:/Users/Matan/memerator/src/components/HistoryMemes.js"],"names":["React","useState","useEffect","Meme","GeneratedMeme","FacebookShareButton","FacebookIcon","TwitterShareButton","TwitterIcon","TumblrShareButton","TumblrIcon","TelegramShareButton","TelegramIcon","WhatsappShareButton","WhatsappIcon","RedditShareButton","RedditIcon","objectToQueryParam","obj","params","Object","entries","map","key","value","join","HistoryMemes","templates","setTemplates","template","setTemplate","topText","setTopText","bottomText","setBottomText","meme","setMeme","memes","setMemes","fetch","then","x","json","response","data","textAlign","width","e","preventDefault","console","log","window","location","reload","template_id","id","text0","text1","username","password","result","success","url","localStorage","setItem","Date","now","i","length","getItem","push","target"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport { Meme } from \"./components/Meme\";\r\nimport { GeneratedMeme } from \"./components/GeneratedMeme\";\r\n\r\nimport {\r\n  FacebookShareButton,\r\n  FacebookIcon,\r\n  TwitterShareButton,\r\n  TwitterIcon,\r\n  TumblrShareButton,\r\n  TumblrIcon,\r\n  TelegramShareButton,\r\n  TelegramIcon,\r\n  WhatsappShareButton,\r\n  WhatsappIcon,\r\n  RedditShareButton,\r\n  RedditIcon,\r\n} from \"react-share\";\r\n\r\nconst objectToQueryParam = (obj) => {\r\n  const params = Object.entries(obj).map(([key, value]) => `${key}=${value}`);\r\n\r\n  return \"?\" + params.join(\"&\");\r\n};\r\n\r\nfunction HistoryMemes() {\r\n  const [templates, setTemplates] = useState([]);\r\n  const [template, setTemplate] = useState(null);\r\n  const [topText, setTopText] = useState(\"\");\r\n  const [bottomText, setBottomText] = useState(\"\");\r\n  const [meme, setMeme] = useState(null);\r\n  const [memes, setMemes] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://api.imgflip.com/get_memes\").then((x) =>\r\n      x.json().then((response) => setTemplates(response.data.memes))\r\n    );\r\n  }, []);\r\n\r\n  if (meme) {\r\n    return (\r\n      <div style={{ textAlign: \"center\" }}>\r\n        <h1> Meme Generator </h1>\r\n        <img style={{ width: 200 }} src={meme} alt=\"custom meme\" />\r\n        {/* add share buttons */}\r\n        <p></p>\r\n        <form\r\n          onClick={async (e) => {\r\n            e.preventDefault();\r\n            console.log(\"refresh\");\r\n            window.location.reload();\r\n          }}\r\n        >\r\n          <FacebookShareButton url={meme}>\r\n            <FacebookIcon size={36} />\r\n          </FacebookShareButton>\r\n          <TwitterShareButton url={meme}>\r\n            <TwitterIcon size={36} />\r\n          </TwitterShareButton>\r\n          <TumblrShareButton url={meme}>\r\n            <TumblrIcon size={36} />\r\n          </TumblrShareButton>\r\n          <WhatsappShareButton url={meme}>\r\n            <WhatsappIcon size={36} />\r\n          </WhatsappShareButton>\r\n          <TelegramShareButton url={meme}>\r\n            <TelegramIcon size={36} />\r\n          </TelegramShareButton>\r\n          <RedditShareButton url={meme}>\r\n            <RedditIcon size={36} />\r\n          </RedditShareButton>\r\n          <p></p>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div style={{ textAlign: \"center\" }}>\r\n      {template && (\r\n        <form\r\n          onSubmit={async (e) => {\r\n            e.preventDefault();\r\n            // add logic to create meme from api\r\n            const params = {\r\n              template_id: template.id,\r\n              text0: topText,\r\n              text1: bottomText,\r\n              username: \"matan.atti\",\r\n              password: \"m12345678\",\r\n            };\r\n            const response = await fetch(\r\n              `https://api.imgflip.com/caption_image${objectToQueryParam(\r\n                params\r\n              )}`\r\n            );\r\n            const result = await response.json();\r\n            console.log(\"result: \", result);\r\n            if (!result.success) {\r\n              setMeme(null);\r\n            }\r\n            if (result.success) {\r\n              setMeme(result.data.url);\r\n              // memes.push(result.data.url);\r\n\r\n              localStorage.setItem(Date.now(), result.data.url);\r\n              for (let i = 0; i < localStorage.length; i++) {\r\n                let key = localStorage.key(i);\r\n                console.log(\"local storage: \", localStorage.getItem(key));\r\n                memes.push(localStorage.getItem(key));\r\n                setMemes(memes);\r\n                console.log(\"my memes: \", memes);\r\n              }\r\n            }\r\n          }}\r\n        >\r\n          <Meme template={template} />\r\n          <input\r\n            placeholder=\"top text\"\r\n            value={topText}\r\n            onChange={(e) => setTopText(e.target.value)}\r\n          />\r\n          <input\r\n            placeholder=\"bottom text\"\r\n            value={bottomText}\r\n            onChange={(e) => setBottomText(e.target.value)}\r\n          />\r\n          <button type=\"submit\">create </button>\r\n        </form>\r\n      )}\r\n      {!template && (\r\n        <>\r\n          {templates.map((template) => {\r\n            return (\r\n              <Meme\r\n                template={template}\r\n                onClick={() => {\r\n                  setTemplate(template);\r\n                }}\r\n              />\r\n            );\r\n          })}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HistoryMemes;\r\n"]},"metadata":{},"sourceType":"module"}