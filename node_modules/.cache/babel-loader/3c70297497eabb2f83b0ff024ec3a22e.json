{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Matan\\\\memerator\\\\src\\\\MemeGenerator.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Meme } from \"./components/Meme\";\nimport styles from \"./mystyle.module.css\";\nimport { SocialMediaShare } from \"./components/SocialMediaShare\";\n\nconst objectToQueryParam = obj => {\n  const params = Object.entries(obj).map(([key, value]) => `${key}=${value}`);\n  return \"?\" + params.join(\"&\");\n};\n\nfunction MemeGenerator() {\n  _s();\n\n  const [memeTemplates, setTemplates] = useState([]);\n  const [memeTemplate, setTemplate] = useState(null);\n  const [topText, setTopText] = useState(\"\");\n  const [bottomText, setBottomText] = useState(\"\");\n  const [meme, setMeme] = useState(null);\n  useEffect(() => {\n    //get the list of memes from the imgflip api\n    fetch(\"https://api.imgflip.com/get_memes\").then(x => x.json().then(response => setTemplates(response.data.memes)));\n  }, []);\n\n  if (meme) {\n    //sends the generated meme to the social media buttons when the user clicks one of them\n    return /*#__PURE__*/_jsxDEV(SocialMediaShare, {\n      meme: meme\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\"\n    },\n    children: [memeTemplate && /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: async e => {\n        e.preventDefault(); //preprare the data the imgflip api needs to create a meme\n\n        const params = {\n          template_id: memeTemplate.id,\n          text0: topText,\n          text1: bottomText,\n          username: \"matan.atti\",\n          password: \"m12345678\"\n        };\n        const response = await fetch(`https://api.imgflip.com/caption_image${objectToQueryParam(params)}`);\n        const result = await response.json();\n        console.log(\"result: \", result);\n\n        if (!result.success) {\n          setMeme(null);\n        }\n\n        if (result.success) {\n          setMeme(result.data.url);\n          localStorage.setItem(Date.now(), result.data.url);\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(Meme, {\n        template: memeTemplate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        maxLength: \"50\",\n        className: styles.topText,\n        placeholder: \"top text\",\n        value: topText,\n        onChange: e => setTopText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        maxLength: \"50\",\n        className: styles.bottomText,\n        placeholder: \"bottom text\",\n        value: bottomText,\n        onChange: e => setBottomText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.rainbowButton,\n        type: \"submit\",\n        children: [\"Create\", \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this), !memeTemplate && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: memeTemplates.map(template => {\n        return /*#__PURE__*/_jsxDEV(Meme, {\n          template: template,\n          onClick: () => {\n            setTemplate(template);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MemeGenerator, \"QSIoiNprsH+akBdflStEn7LnKzE=\");\n\n_c = MemeGenerator;\nexport default MemeGenerator;\n\nvar _c;\n\n$RefreshReg$(_c, \"MemeGenerator\");","map":{"version":3,"sources":["C:/Users/Matan/memerator/src/MemeGenerator.js"],"names":["React","useState","useEffect","Meme","styles","SocialMediaShare","objectToQueryParam","obj","params","Object","entries","map","key","value","join","MemeGenerator","memeTemplates","setTemplates","memeTemplate","setTemplate","topText","setTopText","bottomText","setBottomText","meme","setMeme","fetch","then","x","json","response","data","memes","textAlign","e","preventDefault","template_id","id","text0","text1","username","password","result","console","log","success","url","localStorage","setItem","Date","now","target","rainbowButton","template"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Meme } from \"./components/Meme\";\nimport styles from \"./mystyle.module.css\";\nimport { SocialMediaShare } from \"./components/SocialMediaShare\";\n\nconst objectToQueryParam = (obj) => {\n  const params = Object.entries(obj).map(([key, value]) => `${key}=${value}`);\n\n  return \"?\" + params.join(\"&\");\n};\n\nfunction MemeGenerator() {\n  const [memeTemplates, setTemplates] = useState([]);\n  const [memeTemplate, setTemplate] = useState(null);\n  const [topText, setTopText] = useState(\"\");\n  const [bottomText, setBottomText] = useState(\"\");\n  const [meme, setMeme] = useState(null);\n\n  useEffect(() => {\n    //get the list of memes from the imgflip api\n    fetch(\"https://api.imgflip.com/get_memes\").then((x) =>\n      x.json().then((response) => setTemplates(response.data.memes))\n    );\n  }, []);\n\n  if (meme) {\n    //sends the generated meme to the social media buttons when the user clicks one of them\n    return <SocialMediaShare meme={meme} />;\n  }\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      {memeTemplate && (\n        <form\n          onSubmit={async (e) => {\n            e.preventDefault();\n            //preprare the data the imgflip api needs to create a meme\n            const params = {\n              template_id: memeTemplate.id,\n              text0: topText,\n              text1: bottomText,\n              username: \"matan.atti\",\n              password: \"m12345678\",\n            };\n            const response = await fetch(\n              `https://api.imgflip.com/caption_image${objectToQueryParam(\n                params\n              )}`\n            );\n            const result = await response.json();\n            console.log(\"result: \", result);\n            if (!result.success) {\n              setMeme(null);\n            }\n            if (result.success) {\n              setMeme(result.data.url);\n\n              localStorage.setItem(Date.now(), result.data.url);\n            }\n          }}\n        >\n          <Meme template={memeTemplate} />\n          <p></p>\n\n          <input\n            maxLength=\"50\"\n            className={styles.topText}\n            placeholder=\"top text\"\n            value={topText}\n            onChange={(e) => setTopText(e.target.value)}\n          />\n\n          <input\n            maxLength=\"50\"\n            className={styles.bottomText}\n            placeholder=\"bottom text\"\n            value={bottomText}\n            onChange={(e) => setBottomText(e.target.value)}\n          />\n          <p></p>\n          <button className={styles.rainbowButton} type=\"submit\">\n            Create{\" \"}\n          </button>\n        </form>\n      )}\n      {!memeTemplate && (\n        <>\n          {memeTemplates.map((template) => {\n            return (\n              <Meme\n                template={template}\n                onClick={() => {\n                  setTemplate(template);\n                }}\n              />\n            );\n          })}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default MemeGenerator;\n"]},"metadata":{},"sourceType":"module"}