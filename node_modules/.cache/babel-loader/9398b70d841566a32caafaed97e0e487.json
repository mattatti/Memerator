{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Matan\\\\memerator\\\\src\\\\MemeGenerator.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Meme } from \"./components/Meme\";\nimport { FacebookShareButton, FacebookIcon, TwitterShareButton, TwitterIcon, TumblrShareButton, TumblrIcon, TelegramShareButton, TelegramIcon, WhatsappShareButton, WhatsappIcon, RedditShareButton, RedditIcon } from \"react-share\";\n\nconst objectToQueryParam = obj => {\n  const params = Object.entries(obj).map(([key, value]) => `${key}=${value}`);\n  return \"?\" + params.join(\"&\");\n};\n\nfunction MemeGenerator() {\n  _s();\n\n  const [templates, setTemplates] = useState([]);\n  const [template, setTemplate] = useState(null);\n  const [topText, setTopText] = useState(\"\");\n  const [bottomText, setBottomText] = useState(\"\");\n  const [meme, setMeme] = useState(null);\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\").then(x => x.json().then(response => setTemplates(response.data.memes)));\n  }, []);\n\n  if (meme) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \" Meme Generator \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        style: {\n          width: 200\n        },\n        src: meme,\n        alt: \"custom meme\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onClick: async e => {\n          e.preventDefault();\n          console.log(\"refresh\");\n          window.location.reload();\n        },\n        children: [/*#__PURE__*/_jsxDEV(FacebookShareButton, {\n          url: meme,\n          children: /*#__PURE__*/_jsxDEV(FacebookIcon, {\n            size: 36\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TwitterShareButton, {\n          url: meme,\n          children: /*#__PURE__*/_jsxDEV(TwitterIcon, {\n            size: 36\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TumblrShareButton, {\n          url: meme,\n          children: /*#__PURE__*/_jsxDEV(TumblrIcon, {\n            size: 36\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(WhatsappShareButton, {\n          url: meme,\n          children: /*#__PURE__*/_jsxDEV(WhatsappIcon, {\n            size: 36\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TelegramShareButton, {\n          url: meme,\n          children: /*#__PURE__*/_jsxDEV(TelegramIcon, {\n            size: 36\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(RedditShareButton, {\n          url: meme,\n          children: /*#__PURE__*/_jsxDEV(RedditIcon, {\n            size: 36\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\"\n    },\n    children: [template && /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: async e => {\n        e.preventDefault(); // add logic to create meme from api\n\n        const params = {\n          template_id: template.id,\n          text0: topText,\n          text1: bottomText,\n          username: \"matan.atti\",\n          password: \"m12345678\"\n        };\n        const response = await fetch(`https://api.imgflip.com/caption_image${objectToQueryParam(params)}`);\n        const result = await response.json();\n        console.log(\"result: \", result);\n\n        if (!result.success) {\n          setMeme(null);\n        }\n\n        if (result.success) {\n          setMeme(result.data.url); // memes.push(result.data.url);\n\n          localStorage.setItem(Date.now(), result.data.url);\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(Meme, {\n        template: template\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"top text\",\n        value: topText,\n        onChange: e => setTopText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"bottom text\",\n        value: bottomText,\n        onChange: e => setBottomText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Create Meme \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this), !template && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: templates.map(template => {\n        return /*#__PURE__*/_jsxDEV(Meme, {\n          template: template,\n          onClick: () => {\n            setTemplate(template);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MemeGenerator, \"IYWol5E4C+Kt0/y+Wcj7CJ/7SU0=\");\n\n_c = MemeGenerator;\nexport default MemeGenerator;\n\nvar _c;\n\n$RefreshReg$(_c, \"MemeGenerator\");","map":{"version":3,"sources":["C:/Users/Matan/memerator/src/MemeGenerator.js"],"names":["React","useState","useEffect","Meme","FacebookShareButton","FacebookIcon","TwitterShareButton","TwitterIcon","TumblrShareButton","TumblrIcon","TelegramShareButton","TelegramIcon","WhatsappShareButton","WhatsappIcon","RedditShareButton","RedditIcon","objectToQueryParam","obj","params","Object","entries","map","key","value","join","MemeGenerator","templates","setTemplates","template","setTemplate","topText","setTopText","bottomText","setBottomText","meme","setMeme","fetch","then","x","json","response","data","memes","textAlign","width","e","preventDefault","console","log","window","location","reload","template_id","id","text0","text1","username","password","result","success","url","localStorage","setItem","Date","now","target"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Meme } from \"./components/Meme\";\nimport {\n  FacebookShareButton,\n  FacebookIcon,\n  TwitterShareButton,\n  TwitterIcon,\n  TumblrShareButton,\n  TumblrIcon,\n  TelegramShareButton,\n  TelegramIcon,\n  WhatsappShareButton,\n  WhatsappIcon,\n  RedditShareButton,\n  RedditIcon,\n} from \"react-share\";\n\nconst objectToQueryParam = (obj) => {\n  const params = Object.entries(obj).map(([key, value]) => `${key}=${value}`);\n\n  return \"?\" + params.join(\"&\");\n};\n\nfunction MemeGenerator() {\n  const [templates, setTemplates] = useState([]);\n  const [template, setTemplate] = useState(null);\n  const [topText, setTopText] = useState(\"\");\n  const [bottomText, setBottomText] = useState(\"\");\n  const [meme, setMeme] = useState(null);\n\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\").then((x) =>\n      x.json().then((response) => setTemplates(response.data.memes))\n    );\n  }, []);\n\n  if (meme) {\n    return (\n      <div style={{ textAlign: \"center\" }}>\n        <h1> Meme Generator </h1>\n        <img style={{ width: 200 }} src={meme} alt=\"custom meme\" />\n        {/* add share buttons */}\n        <p></p>\n        <form\n          onClick={async (e) => {\n            e.preventDefault();\n            console.log(\"refresh\");\n            window.location.reload();\n          }}\n        >\n          <FacebookShareButton url={meme}>\n            <FacebookIcon size={36} />\n          </FacebookShareButton>\n          <TwitterShareButton url={meme}>\n            <TwitterIcon size={36} />\n          </TwitterShareButton>\n          <TumblrShareButton url={meme}>\n            <TumblrIcon size={36} />\n          </TumblrShareButton>\n          <WhatsappShareButton url={meme}>\n            <WhatsappIcon size={36} />\n          </WhatsappShareButton>\n          <TelegramShareButton url={meme}>\n            <TelegramIcon size={36} />\n          </TelegramShareButton>\n          <RedditShareButton url={meme}>\n            <RedditIcon size={36} />\n          </RedditShareButton>\n          <p></p>\n        </form>\n      </div>\n    );\n  }\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      {template && (\n        <form\n          onSubmit={async (e) => {\n            e.preventDefault();\n            // add logic to create meme from api\n            const params = {\n              template_id: template.id,\n              text0: topText,\n              text1: bottomText,\n              username: \"matan.atti\",\n              password: \"m12345678\",\n            };\n            const response = await fetch(\n              `https://api.imgflip.com/caption_image${objectToQueryParam(\n                params\n              )}`\n            );\n            const result = await response.json();\n            console.log(\"result: \", result);\n            if (!result.success) {\n              setMeme(null);\n            }\n            if (result.success) {\n              setMeme(result.data.url);\n              // memes.push(result.data.url);\n\n              localStorage.setItem(Date.now(), result.data.url);\n            }\n          }}\n        >\n          <Meme template={template} />\n          <input\n            placeholder=\"top text\"\n            value={topText}\n            onChange={(e) => setTopText(e.target.value)}\n          />\n          <input\n            placeholder=\"bottom text\"\n            value={bottomText}\n            onChange={(e) => setBottomText(e.target.value)}\n          />\n          <button type=\"submit\">Create Meme </button>\n        </form>\n      )}\n      {!template && (\n        <>\n          {templates.map((template) => {\n            return (\n              <Meme\n                template={template}\n                onClick={() => {\n                  setTemplate(template);\n                }}\n              />\n            );\n          })}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default MemeGenerator;\n"]},"metadata":{},"sourceType":"module"}