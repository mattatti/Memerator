{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Matan\\\\memerator\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { Meme } from \"./components/Meme\";\nimport { FacebookShareButton, FacebookIcon, TwitterShareButton, TwitterIcon, TumblrShareButton, TumblrIcon, TelegramShareButton, TelegramIcon, WhatsappShareButton, WhatsappIcon, RedditShareButton, RedditIcon } from \"react-share\";\n\nconst objectToQueryParam = obj => {\n  const params = Object.entries(obj).map(([key, value]) => `${key}=${value}`);\n  return \"?\" + params.join(\"&\");\n};\n\nconst SubmitAnotherMeme = event => {\n  event.preventDefault();\n  console.log(\"refresh\");\n  window.location.reload(false);\n};\n\n_c = SubmitAnotherMeme;\n\nfunction App() {\n  _s();\n\n  const [templates, setTemplates] = useState([]);\n  const [template, setTemplate] = useState(null);\n  const [topText, setTopText] = useState(\"\");\n  const [bottomText, setBottomText] = useState(\"\");\n  const [meme, setMeme] = useState(null);\n  const [memes, setMemes] = useState([]);\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\").then(x => x.json().then(response => setTemplates(response.data.memes)));\n  }, []);\n\n  if (meme) {\n    console.log(\"memes log:\", memes);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \" Meme Generator \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        style: {\n          width: 200\n        },\n        src: meme,\n        alt: \"custom meme\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FacebookShareButton, {\n        url: meme,\n        children: /*#__PURE__*/_jsxDEV(FacebookIcon, {\n          size: 36\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TwitterShareButton, {\n        url: meme,\n        children: /*#__PURE__*/_jsxDEV(TwitterIcon, {\n          size: 36\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TumblrShareButton, {\n        url: meme,\n        children: /*#__PURE__*/_jsxDEV(TumblrIcon, {\n          size: 36\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(WhatsappShareButton, {\n        url: meme,\n        children: /*#__PURE__*/_jsxDEV(WhatsappIcon, {\n          size: 36\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TelegramShareButton, {\n        url: meme,\n        children: /*#__PURE__*/_jsxDEV(TelegramIcon, {\n          size: 36\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RedditShareButton, {\n        url: meme,\n        children: /*#__PURE__*/_jsxDEV(RedditIcon, {\n          size: 36\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onSubmit: SubmitAnotherMeme,\n        type: \"submit\",\n        children: \"Create Another Meme\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" Meme Generator \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), template && /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: async e => {\n        e.preventDefault(); // add logic to create meme from api\n\n        const params = {\n          template_id: template.id,\n          text0: topText,\n          text1: bottomText,\n          username: \"matan.atti\",\n          password: \"m12345678\"\n        };\n        const response = await fetch(`https://api.imgflip.com/caption_image${objectToQueryParam(params)}`);\n        const result = await response.json();\n        setMeme(result.data.url);\n        memes.push(result.data.url);\n        console.log(result);\n        console.log(\"template log:\", template);\n      },\n      children: [/*#__PURE__*/_jsxDEV(Meme, {\n        template: template\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"top text\",\n        value: topText,\n        onChange: e => setTopText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"bottom text\",\n        value: bottomText,\n        onChange: e => setBottomText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"create \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this), !template && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: templates.map(template => {\n        return /*#__PURE__*/_jsxDEV(Meme, {\n          template: template,\n          onClick: () => {\n            setTemplate(template);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"oKm21wOc5J4rOIiPYsd32Uq8tCc=\");\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SubmitAnotherMeme\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["C:/Users/Matan/memerator/src/App.js"],"names":["React","useState","useEffect","Meme","FacebookShareButton","FacebookIcon","TwitterShareButton","TwitterIcon","TumblrShareButton","TumblrIcon","TelegramShareButton","TelegramIcon","WhatsappShareButton","WhatsappIcon","RedditShareButton","RedditIcon","objectToQueryParam","obj","params","Object","entries","map","key","value","join","SubmitAnotherMeme","event","preventDefault","console","log","window","location","reload","App","templates","setTemplates","template","setTemplate","topText","setTopText","bottomText","setBottomText","meme","setMeme","memes","setMemes","fetch","then","x","json","response","data","textAlign","width","e","template_id","id","text0","text1","username","password","result","url","push","target"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { Meme } from \"./components/Meme\";\nimport {\n  FacebookShareButton,\n  FacebookIcon,\n  TwitterShareButton,\n  TwitterIcon,\n  TumblrShareButton,\n  TumblrIcon,\n  TelegramShareButton,\n  TelegramIcon,\n  WhatsappShareButton,\n  WhatsappIcon,\n  RedditShareButton,\n  RedditIcon,\n} from \"react-share\";\n\nconst objectToQueryParam = (obj) => {\n  const params = Object.entries(obj).map(([key, value]) => `${key}=${value}`);\n\n  return \"?\" + params.join(\"&\");\n};\nconst SubmitAnotherMeme = (event) => {\n  event.preventDefault();\n  console.log(\"refresh\");\n  window.location.reload(false);\n};\nfunction App() {\n  const [templates, setTemplates] = useState([]);\n  const [template, setTemplate] = useState(null);\n  const [topText, setTopText] = useState(\"\");\n  const [bottomText, setBottomText] = useState(\"\");\n  const [meme, setMeme] = useState(null);\n  const [memes, setMemes] = useState([]);\n\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\").then((x) =>\n      x.json().then((response) => setTemplates(response.data.memes))\n    );\n  }, []);\n\n  if (meme) {\n    console.log(\"memes log:\", memes);\n\n    return (\n      <div style={{ textAlign: \"center\" }}>\n        <h1> Meme Generator </h1>\n        <img style={{ width: 200 }} src={meme} alt=\"custom meme\" />\n        {/* add share buttons */}\n        <p></p>\n        <FacebookShareButton url={meme}>\n          <FacebookIcon size={36} />\n        </FacebookShareButton>\n        <TwitterShareButton url={meme}>\n          <TwitterIcon size={36} />\n        </TwitterShareButton>\n        <TumblrShareButton url={meme}>\n          <TumblrIcon size={36} />\n        </TumblrShareButton>\n        <WhatsappShareButton url={meme}>\n          <WhatsappIcon size={36} />\n        </WhatsappShareButton>\n        <TelegramShareButton url={meme}>\n          <TelegramIcon size={36} />\n        </TelegramShareButton>\n        <RedditShareButton url={meme}>\n          <RedditIcon size={36} />\n        </RedditShareButton>\n        <p></p>\n        <button onSubmit={SubmitAnotherMeme} type=\"submit\">\n          Create Another Meme\n        </button>\n      </div>\n    );\n  }\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      <h1> Meme Generator </h1>\n      {template && (\n        <form\n          onSubmit={async (e) => {\n            e.preventDefault();\n            // add logic to create meme from api\n            const params = {\n              template_id: template.id,\n              text0: topText,\n              text1: bottomText,\n              username: \"matan.atti\",\n              password: \"m12345678\",\n            };\n            const response = await fetch(\n              `https://api.imgflip.com/caption_image${objectToQueryParam(\n                params\n              )}`\n            );\n            const result = await response.json();\n            setMeme(result.data.url);\n\n            memes.push(result.data.url);\n            console.log(result);\n            console.log(\"template log:\", template);\n          }}\n        >\n          <Meme template={template} />\n\n          <input\n            placeholder=\"top text\"\n            value={topText}\n            onChange={(e) => setTopText(e.target.value)}\n          />\n          <input\n            placeholder=\"bottom text\"\n            value={bottomText}\n            onChange={(e) => setBottomText(e.target.value)}\n          />\n          <button type=\"submit\">create </button>\n        </form>\n      )}\n      {!template && (\n        <>\n          {templates.map((template) => {\n            return (\n              <Meme\n                template={template}\n                onClick={() => {\n                  setTemplate(template);\n                }}\n              />\n            );\n          })}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}