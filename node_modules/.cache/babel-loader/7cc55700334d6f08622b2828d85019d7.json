{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Matan\\\\memerator\\\\src\\\\MemeCreator.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Meme } from \"./components/Meme\";\nimport { FacebookShareButton, FacebookIcon, TwitterShareButton, TwitterIcon, TumblrShareButton, TumblrIcon, TelegramShareButton, TelegramIcon, WhatsappShareButton, WhatsappIcon, RedditShareButton, RedditIcon } from \"react-share\";\n\nconst objectToQueryParam = obj => {\n  const params = Object.entries(obj).map(([key, value]) => `${key}=${value}`);\n  return \"?\" + params.join(\"&\");\n};\n\nclass MemeCreator extends Component {\n  constructor() {\n    super();\n    this.state = {\n      templates: [],\n      template: \"\",\n      topText: \"\",\n      bottomText: \"\",\n      meme: \"\",\n      memes: []\n    };\n\n    if (meme) {\n      console.log(\"memes log:\", memes);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: \"center\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \" Meme Generator \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          style: {\n            width: 200\n          },\n          src: meme,\n          alt: \"custom meme\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FacebookShareButton, {\n          url: meme,\n          children: /*#__PURE__*/_jsxDEV(FacebookIcon, {\n            size: 36\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TwitterShareButton, {\n          url: meme,\n          children: /*#__PURE__*/_jsxDEV(TwitterIcon, {\n            size: 36\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TumblrShareButton, {\n          url: meme,\n          children: /*#__PURE__*/_jsxDEV(TumblrIcon, {\n            size: 36\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(WhatsappShareButton, {\n          url: meme,\n          children: /*#__PURE__*/_jsxDEV(WhatsappIcon, {\n            size: 36\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TelegramShareButton, {\n          url: meme,\n          children: /*#__PURE__*/_jsxDEV(TelegramIcon, {\n            size: 36\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(RedditShareButton, {\n          url: meme,\n          children: /*#__PURE__*/_jsxDEV(RedditIcon, {\n            size: 36\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Create Another Meme\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \" Meme Generator \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), this.state.template && /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: async e => {\n          e.preventDefault(); // add logic to create meme from api\n\n          const params = {\n            template_id: template.id,\n            text0: topText,\n            text1: bottomText,\n            username: \"matan.atti\",\n            password: \"m12345678\"\n          };\n          const response = await fetch(`https://api.imgflip.com/caption_image${objectToQueryParam(params)}`);\n          const result = await response.json();\n          setMeme(result.data.url);\n          memes.push(result.data.url);\n          console.log(result);\n          console.log(\"template log:\", this.state.template);\n        },\n        children: [/*#__PURE__*/_jsxDEV(Meme, {\n          template: this.state.template\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: \"top text\",\n          value: topText,\n          onChange: e => setTopText(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: \"bottom text\",\n          value: bottomText,\n          onChange: e => setBottomText(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"create \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this), !this.state.template && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: this.state.templates.map(template => {\n          return /*#__PURE__*/_jsxDEV(Meme, {\n            template: template,\n            onClick: () => {\n              this.setState({\n                template: template\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default MemeCreator;","map":{"version":3,"sources":["C:/Users/Matan/memerator/src/MemeCreator.js"],"names":["React","Component","Meme","FacebookShareButton","FacebookIcon","TwitterShareButton","TwitterIcon","TumblrShareButton","TumblrIcon","TelegramShareButton","TelegramIcon","WhatsappShareButton","WhatsappIcon","RedditShareButton","RedditIcon","objectToQueryParam","obj","params","Object","entries","map","key","value","join","MemeCreator","constructor","state","templates","template","topText","bottomText","meme","memes","console","log","textAlign","width","e","preventDefault","template_id","id","text0","text1","username","password","response","fetch","result","json","setMeme","data","url","push","setTopText","target","setBottomText","setState"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,SACEC,mBADF,EAEEC,YAFF,EAGEC,kBAHF,EAIEC,WAJF,EAKEC,iBALF,EAMEC,UANF,EAOEC,mBAPF,EAQEC,YARF,EASEC,mBATF,EAUEC,YAVF,EAWEC,iBAXF,EAYEC,UAZF,QAaO,aAbP;;AAeA,MAAMC,kBAAkB,GAAIC,GAAD,IAAS;AAClC,QAAMC,MAAM,GAAGC,MAAM,CAACC,OAAP,CAAeH,GAAf,EAAoBI,GAApB,CAAwB,CAAC,CAACC,GAAD,EAAMC,KAAN,CAAD,KAAmB,GAAED,GAAI,IAAGC,KAAM,EAA1D,CAAf;AAEA,SAAO,MAAML,MAAM,CAACM,IAAP,CAAY,GAAZ,CAAb;AACD,CAJD;;AAKA,MAAMC,WAAN,SAA0BvB,SAA1B,CAAoC;AAClCwB,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,SAAS,EAAE,EADA;AAEXC,MAAAA,QAAQ,EAAE,EAFC;AAGXC,MAAAA,OAAO,EAAE,EAHE;AAIXC,MAAAA,UAAU,EAAE,EAJD;AAKXC,MAAAA,IAAI,EAAE,EALK;AAMXC,MAAAA,KAAK,EAAE;AANI,KAAb;;AASA,QAAID,IAAJ,EAAU;AACRE,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,KAA1B;AAEA,0BACE;AAAK,QAAA,KAAK,EAAE;AAAEG,UAAAA,SAAS,EAAE;AAAb,SAAZ;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAK,UAAA,KAAK,EAAE;AAAEC,YAAAA,KAAK,EAAE;AAAT,WAAZ;AAA4B,UAAA,GAAG,EAAEL,IAAjC;AAAuC,UAAA,GAAG,EAAC;AAA3C;AAAA;AAAA;AAAA;AAAA,gBAFF,eAIE;AAAA;AAAA;AAAA;AAAA,gBAJF,eAKE,QAAC,mBAAD;AAAqB,UAAA,GAAG,EAAEA,IAA1B;AAAA,iCACE,QAAC,YAAD;AAAc,YAAA,IAAI,EAAE;AAApB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBALF,eAQE,QAAC,kBAAD;AAAoB,UAAA,GAAG,EAAEA,IAAzB;AAAA,iCACE,QAAC,WAAD;AAAa,YAAA,IAAI,EAAE;AAAnB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBARF,eAWE,QAAC,iBAAD;AAAmB,UAAA,GAAG,EAAEA,IAAxB;AAAA,iCACE,QAAC,UAAD;AAAY,YAAA,IAAI,EAAE;AAAlB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAXF,eAcE,QAAC,mBAAD;AAAqB,UAAA,GAAG,EAAEA,IAA1B;AAAA,iCACE,QAAC,YAAD;AAAc,YAAA,IAAI,EAAE;AAApB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAdF,eAiBE,QAAC,mBAAD;AAAqB,UAAA,GAAG,EAAEA,IAA1B;AAAA,iCACE,QAAC,YAAD;AAAc,YAAA,IAAI,EAAE;AAApB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAjBF,eAoBE,QAAC,iBAAD;AAAmB,UAAA,GAAG,EAAEA,IAAxB;AAAA,iCACE,QAAC,UAAD;AAAY,YAAA,IAAI,EAAE;AAAlB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBApBF,eAuBE;AAAA;AAAA;AAAA;AAAA,gBAvBF,eAwBE;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAxBF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AA4BD;;AACD,wBACE;AAAK,MAAA,KAAK,EAAE;AAAEI,QAAAA,SAAS,EAAE;AAAb,OAAZ;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEG,KAAKT,KAAL,CAAWE,QAAX,iBACC;AACE,QAAA,QAAQ,EAAE,MAAOS,CAAP,IAAa;AACrBA,UAAAA,CAAC,CAACC,cAAF,GADqB,CAErB;;AACA,gBAAMrB,MAAM,GAAG;AACbsB,YAAAA,WAAW,EAAEX,QAAQ,CAACY,EADT;AAEbC,YAAAA,KAAK,EAAEZ,OAFM;AAGba,YAAAA,KAAK,EAAEZ,UAHM;AAIba,YAAAA,QAAQ,EAAE,YAJG;AAKbC,YAAAA,QAAQ,EAAE;AALG,WAAf;AAOA,gBAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,wCAAuC/B,kBAAkB,CACxDE,MADwD,CAExD,EAHwB,CAA5B;AAKA,gBAAM8B,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAArB;AACAC,UAAAA,OAAO,CAACF,MAAM,CAACG,IAAP,CAAYC,GAAb,CAAP;AAEAnB,UAAAA,KAAK,CAACoB,IAAN,CAAWL,MAAM,CAACG,IAAP,CAAYC,GAAvB;AACAlB,UAAAA,OAAO,CAACC,GAAR,CAAYa,MAAZ;AACAd,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6B,KAAKR,KAAL,CAAWE,QAAxC;AACD,SAtBH;AAAA,gCAwBE,QAAC,IAAD;AAAM,UAAA,QAAQ,EAAE,KAAKF,KAAL,CAAWE;AAA3B;AAAA;AAAA;AAAA;AAAA,gBAxBF,eA0BE;AACE,UAAA,WAAW,EAAC,UADd;AAEE,UAAA,KAAK,EAAEC,OAFT;AAGE,UAAA,QAAQ,EAAGQ,CAAD,IAAOgB,UAAU,CAAChB,CAAC,CAACiB,MAAF,CAAShC,KAAV;AAH7B;AAAA;AAAA;AAAA;AAAA,gBA1BF,eA+BE;AACE,UAAA,WAAW,EAAC,aADd;AAEE,UAAA,KAAK,EAAEQ,UAFT;AAGE,UAAA,QAAQ,EAAGO,CAAD,IAAOkB,aAAa,CAAClB,CAAC,CAACiB,MAAF,CAAShC,KAAV;AAHhC;AAAA;AAAA;AAAA;AAAA,gBA/BF,eAoCE;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBApCF;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,EA0CG,CAAC,KAAKI,KAAL,CAAWE,QAAZ,iBACC;AAAA,kBACG,KAAKF,KAAL,CAAWC,SAAX,CAAqBP,GAArB,CAA0BQ,QAAD,IAAc;AACtC,8BACE,QAAC,IAAD;AACE,YAAA,QAAQ,EAAEA,QADZ;AAEE,YAAA,OAAO,EAAE,MAAM;AACb,mBAAK4B,QAAL,CAAc;AAAE5B,gBAAAA,QAAQ,EAAEA;AAAZ,eAAd;AACD;AAJH;AAAA;AAAA;AAAA;AAAA,kBADF;AAQD,SATA;AADH,uBA3CJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AA2DD;;AAvGiC;;AA0GpC,eAAeJ,WAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport { Meme } from \"./components/Meme\";\r\nimport {\r\n  FacebookShareButton,\r\n  FacebookIcon,\r\n  TwitterShareButton,\r\n  TwitterIcon,\r\n  TumblrShareButton,\r\n  TumblrIcon,\r\n  TelegramShareButton,\r\n  TelegramIcon,\r\n  WhatsappShareButton,\r\n  WhatsappIcon,\r\n  RedditShareButton,\r\n  RedditIcon,\r\n} from \"react-share\";\r\n\r\nconst objectToQueryParam = (obj) => {\r\n  const params = Object.entries(obj).map(([key, value]) => `${key}=${value}`);\r\n\r\n  return \"?\" + params.join(\"&\");\r\n};\r\nclass MemeCreator extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      templates: [],\r\n      template: \"\",\r\n      topText: \"\",\r\n      bottomText: \"\",\r\n      meme: \"\",\r\n      memes: [],\r\n    };\r\n\r\n    if (meme) {\r\n      console.log(\"memes log:\", memes);\r\n\r\n      return (\r\n        <div style={{ textAlign: \"center\" }}>\r\n          <h1> Meme Generator </h1>\r\n          <img style={{ width: 200 }} src={meme} alt=\"custom meme\" />\r\n          {/* add share buttons */}\r\n          <p></p>\r\n          <FacebookShareButton url={meme}>\r\n            <FacebookIcon size={36} />\r\n          </FacebookShareButton>\r\n          <TwitterShareButton url={meme}>\r\n            <TwitterIcon size={36} />\r\n          </TwitterShareButton>\r\n          <TumblrShareButton url={meme}>\r\n            <TumblrIcon size={36} />\r\n          </TumblrShareButton>\r\n          <WhatsappShareButton url={meme}>\r\n            <WhatsappIcon size={36} />\r\n          </WhatsappShareButton>\r\n          <TelegramShareButton url={meme}>\r\n            <TelegramIcon size={36} />\r\n          </TelegramShareButton>\r\n          <RedditShareButton url={meme}>\r\n            <RedditIcon size={36} />\r\n          </RedditShareButton>\r\n          <p></p>\r\n          <button type=\"submit\">Create Another Meme</button>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div style={{ textAlign: \"center\" }}>\r\n        <h1> Meme Generator </h1>\r\n        {this.state.template && (\r\n          <form\r\n            onSubmit={async (e) => {\r\n              e.preventDefault();\r\n              // add logic to create meme from api\r\n              const params = {\r\n                template_id: template.id,\r\n                text0: topText,\r\n                text1: bottomText,\r\n                username: \"matan.atti\",\r\n                password: \"m12345678\",\r\n              };\r\n              const response = await fetch(\r\n                `https://api.imgflip.com/caption_image${objectToQueryParam(\r\n                  params\r\n                )}`\r\n              );\r\n              const result = await response.json();\r\n              setMeme(result.data.url);\r\n\r\n              memes.push(result.data.url);\r\n              console.log(result);\r\n              console.log(\"template log:\", this.state.template);\r\n            }}\r\n          >\r\n            <Meme template={this.state.template} />\r\n\r\n            <input\r\n              placeholder=\"top text\"\r\n              value={topText}\r\n              onChange={(e) => setTopText(e.target.value)}\r\n            />\r\n            <input\r\n              placeholder=\"bottom text\"\r\n              value={bottomText}\r\n              onChange={(e) => setBottomText(e.target.value)}\r\n            />\r\n            <button type=\"submit\">create </button>\r\n          </form>\r\n        )}\r\n        {!this.state.template && (\r\n          <>\r\n            {this.state.templates.map((template) => {\r\n              return (\r\n                <Meme\r\n                  template={template}\r\n                  onClick={() => {\r\n                    this.setState({ template: template });\r\n                  }}\r\n                />\r\n              );\r\n            })}\r\n          </>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MemeCreator;\r\n"]},"metadata":{},"sourceType":"module"}