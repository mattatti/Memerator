{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Matan\\\\memerator\\\\src\\\\App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { Meme } from \"./components/Meme\";\nimport { FacebookShareButton, FacebookIcon, TwitterShareButton, TwitterIcon, TumblrShareButton, TumblrIcon, TelegramShareButton, TelegramIcon, WhatsappShareButton, WhatsappIcon, RedditShareButton, RedditIcon } from \"react-share\";\n\nconst objectToQueryParam = obj => {\n  const params = Object.entries(obj).map(([key, value]) => `${key}=${value}`);\n  return \"?\" + params.join(\"&\");\n}; // SubmitAnotherMeme (event) {\n//   event.preventDefault();\n//   console.log(\"refresh\");\n//   window.location.reload(false);\n// }\n\n\nclass App {\n  constructor() {\n    const [templates, setTemplates] = useState([]);\n    const [template, setTemplate] = useState(null);\n    const [topText, setTopText] = useState(\"\");\n    const [bottomText, setBottomText] = useState(\"\");\n    const [meme, setMeme] = useState(null);\n    const [memes, setMemes] = useState([]); //this.handleSubmitAnotherMeme = this.handleSubmitAnotherMeme.bind(this);\n\n    useEffect(() => {\n      fetch(\"https://api.imgflip.com/get_memes\").then(x => x.json().then(response => setTemplates(response.data.memes)));\n    }, []);\n\n    if (meme) {\n      console.log(\"memes log:\", memes);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: \"center\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \" Meme Generator \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          style: {\n            width: 200\n          },\n          src: meme,\n          alt: \"custom meme\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FacebookShareButton, {\n          url: meme,\n          children: /*#__PURE__*/_jsxDEV(FacebookIcon, {\n            size: 36\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TwitterShareButton, {\n          url: meme,\n          children: /*#__PURE__*/_jsxDEV(TwitterIcon, {\n            size: 36\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TumblrShareButton, {\n          url: meme,\n          children: /*#__PURE__*/_jsxDEV(TumblrIcon, {\n            size: 36\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(WhatsappShareButton, {\n          url: meme,\n          children: /*#__PURE__*/_jsxDEV(WhatsappIcon, {\n            size: 36\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TelegramShareButton, {\n          url: meme,\n          children: /*#__PURE__*/_jsxDEV(TelegramIcon, {\n            size: 36\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(RedditShareButton, {\n          url: meme,\n          children: /*#__PURE__*/_jsxDEV(RedditIcon, {\n            size: 36\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \" Meme Generator \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), template && /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: async e => {\n          e.preventDefault(); // add logic to create meme from api\n\n          const params = {\n            template_id: template.id,\n            text0: topText,\n            text1: bottomText,\n            username: \"matan.atti\",\n            password: \"m12345678\"\n          };\n          const response = await fetch(`https://api.imgflip.com/caption_image${objectToQueryParam(params)}`);\n          const result = await response.json();\n          setMeme(result.data.url);\n          memes.push(result.data.url);\n          console.log(result);\n          console.log(\"template log:\", template);\n        },\n        children: [/*#__PURE__*/_jsxDEV(Meme, {\n          template: template\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: \"top text\",\n          value: topText,\n          onChange: e => setTopText(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: \"bottom text\",\n          value: bottomText,\n          onChange: e => setBottomText(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"create \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this), !template && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: templates.map(template => {\n          return /*#__PURE__*/_jsxDEV(Meme, {\n            template: template,\n            onClick: () => {\n              setTemplate(template);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Matan/memerator/src/App.js"],"names":["React","useState","useEffect","Meme","FacebookShareButton","FacebookIcon","TwitterShareButton","TwitterIcon","TumblrShareButton","TumblrIcon","TelegramShareButton","TelegramIcon","WhatsappShareButton","WhatsappIcon","RedditShareButton","RedditIcon","objectToQueryParam","obj","params","Object","entries","map","key","value","join","App","constructor","templates","setTemplates","template","setTemplate","topText","setTopText","bottomText","setBottomText","meme","setMeme","memes","setMemes","fetch","then","x","json","response","data","console","log","textAlign","width","e","preventDefault","template_id","id","text0","text1","username","password","result","url","push","target"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { Meme } from \"./components/Meme\";\nimport {\n  FacebookShareButton,\n  FacebookIcon,\n  TwitterShareButton,\n  TwitterIcon,\n  TumblrShareButton,\n  TumblrIcon,\n  TelegramShareButton,\n  TelegramIcon,\n  WhatsappShareButton,\n  WhatsappIcon,\n  RedditShareButton,\n  RedditIcon,\n} from \"react-share\";\n\nconst objectToQueryParam = (obj) => {\n  const params = Object.entries(obj).map(([key, value]) => `${key}=${value}`);\n\n  return \"?\" + params.join(\"&\");\n};\n// SubmitAnotherMeme (event) {\n//   event.preventDefault();\n//   console.log(\"refresh\");\n//   window.location.reload(false);\n// }\nclass App {\n  constructor() {\n    const [templates, setTemplates] = useState([]);\n    const [template, setTemplate] = useState(null);\n    const [topText, setTopText] = useState(\"\");\n    const [bottomText, setBottomText] = useState(\"\");\n    const [meme, setMeme] = useState(null);\n    const [memes, setMemes] = useState([]);\n    //this.handleSubmitAnotherMeme = this.handleSubmitAnotherMeme.bind(this);\n    useEffect(() => {\n      fetch(\"https://api.imgflip.com/get_memes\").then((x) =>\n        x.json().then((response) => setTemplates(response.data.memes))\n      );\n    }, []);\n\n    if (meme) {\n      console.log(\"memes log:\", memes);\n\n      return (\n        <div style={{ textAlign: \"center\" }}>\n          <h1> Meme Generator </h1>\n          <img style={{ width: 200 }} src={meme} alt=\"custom meme\" />\n\n          <p></p>\n          <FacebookShareButton url={meme}>\n            <FacebookIcon size={36} />\n          </FacebookShareButton>\n          <TwitterShareButton url={meme}>\n            <TwitterIcon size={36} />\n          </TwitterShareButton>\n          <TumblrShareButton url={meme}>\n            <TumblrIcon size={36} />\n          </TumblrShareButton>\n          <WhatsappShareButton url={meme}>\n            <WhatsappIcon size={36} />\n          </WhatsappShareButton>\n          <TelegramShareButton url={meme}>\n            <TelegramIcon size={36} />\n          </TelegramShareButton>\n          <RedditShareButton url={meme}>\n            <RedditIcon size={36} />\n          </RedditShareButton>\n          <p></p>\n          {/* <button onSubmit={this.handleSubmitAnotherMeme}>\n                 Create Another Meme\n          </button> */}\n        </div>\n      );\n    }\n    return (\n      <div style={{ textAlign: \"center\" }}>\n        <h1> Meme Generator </h1>\n        {template && (\n          <form\n            onSubmit={async (e) => {\n              e.preventDefault();\n              // add logic to create meme from api\n              const params = {\n                template_id: template.id,\n                text0: topText,\n                text1: bottomText,\n                username: \"matan.atti\",\n                password: \"m12345678\",\n              };\n              const response = await fetch(\n                `https://api.imgflip.com/caption_image${objectToQueryParam(\n                  params\n                )}`\n              );\n              const result = await response.json();\n              setMeme(result.data.url);\n\n              memes.push(result.data.url);\n              console.log(result);\n              console.log(\"template log:\", template);\n            }}\n          >\n            <Meme template={template} />\n\n            <input\n              placeholder=\"top text\"\n              value={topText}\n              onChange={(e) => setTopText(e.target.value)}\n            />\n            <input\n              placeholder=\"bottom text\"\n              value={bottomText}\n              onChange={(e) => setBottomText(e.target.value)}\n            />\n            <button type=\"submit\">create </button>\n          </form>\n        )}\n        {!template && (\n          <>\n            {templates.map((template) => {\n              return (\n                <Meme\n                  template={template}\n                  onClick={() => {\n                    setTemplate(template);\n                  }}\n                />\n              );\n            })}\n          </>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}